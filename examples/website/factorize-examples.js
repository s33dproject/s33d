const path = require('path');
const { examples } = require('./src/data');
const rimraf = require('rimraf');
const mkdirp = require('mkdirp');
const { promisify } = require('util');
const { EventEmitter } = require('events');
const fs = require('fs');

module.exports = function () {
  const baseDir = path.resolve(__dirname, '../');
  const exampleDirName = 'examples';
  const exampleBuildDirName = 'examples/build';

  const exampleDir = path.resolve(__dirname, baseDir, exampleDirName);
  const exampleBuildDir = path.resolve(__dirname, baseDir, exampleBuildDirName);

  // remove & re-create example directory
  rimraf.sync(exampleBuildDir);
  mkdirp.sync(exampleBuildDir);

  const commonBundleUrl = 'dist/website-common.js';
  const commonBundleFile = path.resolve(baseDir, commonBundleUrl);
  const exampleList = examples.list.filter(f => f.visible !== false);
  const exampleFileNames = exampleList.map(e => `${e.name}.js`);
  const exampleFiles = exampleFileNames.map(f => path.join(exampleDir, f));
  const exampleOutputs = exampleFileNames.map(f => path.join(exampleBuildDir, f));

  const html = (item) => `
<!--
  Note: This file has been generated by the build
  script used to scaffold the canvas-sketch frontend.

  Please see the canvas-sketch documentation to learn
  how to build your own sketches:

    https://github.com/mattdesl/canvas-sketch
-->
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- For the built examples, we will pretend they are based in examples/ folder -->
  <base href="/examples/">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, shrink-to-fit=0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
  <title>${item.title}</title>
  <link rel="stylesheet" href="/website/src/example.css">
</head>
<body>
  <script defer src="/${commonBundleUrl}"></script>
  <script defer src="/${exampleBuildDirName}/${item.name}.js"></script>
</body>
</html>
  `.trim();

  const writeFile = promisify(fs.writeFile);

  const emitter = new EventEmitter();

  // Features for factor bundle
  const appOutput = path.resolve(baseDir, 'dist/website-app.js');
  const appEntry = path.resolve(__dirname, 'src/index.js');
  const outputs = [ appOutput ].concat(exampleOutputs);
  const entries = [ appEntry ].concat(exampleFiles);

  return Promise.all(exampleList.map(item => {
    const data = html(item);
    const htmlFile = `${item.name}.html`;
    return writeFile(path.join(exampleBuildDir, htmlFile), data);
  })).then(() => {
    return Object.assign(emitter, {
      common: commonBundleUrl,
      commonFile: commonBundleFile,
      entries,
      outputs,
      plugin: [ require('factor-bundle'), { outputs } ]
    });
  }).catch(err => {
    console.error(err);
    throw err;
  });
};
